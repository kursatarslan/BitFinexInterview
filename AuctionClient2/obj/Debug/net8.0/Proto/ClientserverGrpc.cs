// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/clientserver.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AuctionGrpcServices {
  /// <summary>
  ///Server Streaming RPC
  /// </summary>
  public static partial class AuctionServerService
  {
    static readonly string __ServiceName = "Auction.AuctionServerService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.SubscribeMessage> __Marshaller_Auction_SubscribeMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.SubscribeMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.Auction> __Marshaller_Auction_Auction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.Auction.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.BidNotifyMessage> __Marshaller_Auction_BidNotifyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.BidNotifyMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.AuctionConclusion> __Marshaller_Auction_AuctionConclusion = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.AuctionConclusion.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.Auction> __Method_RegisterAuctionNotification = new grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.Auction>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RegisterAuctionNotification",
        __Marshaller_Auction_SubscribeMessage,
        __Marshaller_Auction_Auction);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.BidNotifyMessage> __Method_RegisterBidNotification = new grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.BidNotifyMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RegisterBidNotification",
        __Marshaller_Auction_SubscribeMessage,
        __Marshaller_Auction_BidNotifyMessage);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.AuctionConclusion> __Method_RegisterAuctionConclusionNotification = new grpc::Method<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.AuctionConclusion>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RegisterAuctionConclusionNotification",
        __Marshaller_Auction_SubscribeMessage,
        __Marshaller_Auction_AuctionConclusion);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AuctionGrpcServices.ClientserverReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AuctionServerService</summary>
    [grpc::BindServiceMethod(typeof(AuctionServerService), "BindService")]
    public abstract partial class AuctionServerServiceBase
    {
      /// <summary>
      ///Broadcast Notifications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RegisterAuctionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::IServerStreamWriter<global::AuctionGrpcServices.Auction> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RegisterBidNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::IServerStreamWriter<global::AuctionGrpcServices.BidNotifyMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RegisterAuctionConclusionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::IServerStreamWriter<global::AuctionGrpcServices.AuctionConclusion> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AuctionServerService</summary>
    public partial class AuctionServerServiceClient : grpc::ClientBase<AuctionServerServiceClient>
    {
      /// <summary>Creates a new client for AuctionServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuctionServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AuctionServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuctionServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuctionServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuctionServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Broadcast Notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.Auction> RegisterAuctionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAuctionNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Broadcast Notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.Auction> RegisterAuctionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RegisterAuctionNotification, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.BidNotifyMessage> RegisterBidNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterBidNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.BidNotifyMessage> RegisterBidNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RegisterBidNotification, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.AuctionConclusion> RegisterAuctionConclusionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAuctionConclusionNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AuctionGrpcServices.AuctionConclusion> RegisterAuctionConclusionNotification(global::AuctionGrpcServices.SubscribeMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RegisterAuctionConclusionNotification, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AuctionServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuctionServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AuctionServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterAuctionNotification, serviceImpl.RegisterAuctionNotification)
          .AddMethod(__Method_RegisterBidNotification, serviceImpl.RegisterBidNotification)
          .AddMethod(__Method_RegisterAuctionConclusionNotification, serviceImpl.RegisterAuctionConclusionNotification).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuctionServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterAuctionNotification, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.Auction>(serviceImpl.RegisterAuctionNotification));
      serviceBinder.AddMethod(__Method_RegisterBidNotification, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.BidNotifyMessage>(serviceImpl.RegisterBidNotification));
      serviceBinder.AddMethod(__Method_RegisterAuctionConclusionNotification, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AuctionGrpcServices.SubscribeMessage, global::AuctionGrpcServices.AuctionConclusion>(serviceImpl.RegisterAuctionConclusionNotification));
    }

  }
  /// <summary>
  ///Unary RPC
  /// </summary>
  public static partial class AuctionClientService
  {
    static readonly string __ServiceName = "Auction.AuctionClientService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.RegisterMessage> __Marshaller_Auction_RegisterMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.RegisterMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.DefaultResponse> __Marshaller_Auction_DefaultResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.DefaultResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.BidMessage> __Marshaller_Auction_BidMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.BidMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AuctionGrpcServices.OpenAuctions> __Marshaller_Auction_OpenAuctions = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AuctionGrpcServices.OpenAuctions.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AuctionGrpcServices.RegisterMessage, global::AuctionGrpcServices.DefaultResponse> __Method_RegisterNewClient = new grpc::Method<global::AuctionGrpcServices.RegisterMessage, global::AuctionGrpcServices.DefaultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterNewClient",
        __Marshaller_Auction_RegisterMessage,
        __Marshaller_Auction_DefaultResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AuctionGrpcServices.BidMessage, global::AuctionGrpcServices.DefaultResponse> __Method_Bid = new grpc::Method<global::AuctionGrpcServices.BidMessage, global::AuctionGrpcServices.DefaultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Bid",
        __Marshaller_Auction_BidMessage,
        __Marshaller_Auction_DefaultResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AuctionGrpcServices.OpenAuctions> __Method_GetOpenAuctions = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AuctionGrpcServices.OpenAuctions>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOpenAuctions",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Auction_OpenAuctions);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AuctionGrpcServices.ClientserverReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of AuctionClientService</summary>
    [grpc::BindServiceMethod(typeof(AuctionClientService), "BindService")]
    public abstract partial class AuctionClientServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AuctionGrpcServices.DefaultResponse> RegisterNewClient(global::AuctionGrpcServices.RegisterMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AuctionGrpcServices.DefaultResponse> Bid(global::AuctionGrpcServices.BidMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AuctionGrpcServices.OpenAuctions> GetOpenAuctions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AuctionClientService</summary>
    public partial class AuctionClientServiceClient : grpc::ClientBase<AuctionClientServiceClient>
    {
      /// <summary>Creates a new client for AuctionClientService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuctionClientServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AuctionClientService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuctionClientServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuctionClientServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuctionClientServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.DefaultResponse RegisterNewClient(global::AuctionGrpcServices.RegisterMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNewClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.DefaultResponse RegisterNewClient(global::AuctionGrpcServices.RegisterMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterNewClient, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.DefaultResponse> RegisterNewClientAsync(global::AuctionGrpcServices.RegisterMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNewClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.DefaultResponse> RegisterNewClientAsync(global::AuctionGrpcServices.RegisterMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterNewClient, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.DefaultResponse Bid(global::AuctionGrpcServices.BidMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Bid(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.DefaultResponse Bid(global::AuctionGrpcServices.BidMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Bid, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.DefaultResponse> BidAsync(global::AuctionGrpcServices.BidMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BidAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.DefaultResponse> BidAsync(global::AuctionGrpcServices.BidMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Bid, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.OpenAuctions GetOpenAuctions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenAuctions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AuctionGrpcServices.OpenAuctions GetOpenAuctions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOpenAuctions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.OpenAuctions> GetOpenAuctionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpenAuctionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AuctionGrpcServices.OpenAuctions> GetOpenAuctionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOpenAuctions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AuctionClientServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuctionClientServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AuctionClientServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterNewClient, serviceImpl.RegisterNewClient)
          .AddMethod(__Method_Bid, serviceImpl.Bid)
          .AddMethod(__Method_GetOpenAuctions, serviceImpl.GetOpenAuctions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuctionClientServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterNewClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuctionGrpcServices.RegisterMessage, global::AuctionGrpcServices.DefaultResponse>(serviceImpl.RegisterNewClient));
      serviceBinder.AddMethod(__Method_Bid, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuctionGrpcServices.BidMessage, global::AuctionGrpcServices.DefaultResponse>(serviceImpl.Bid));
      serviceBinder.AddMethod(__Method_GetOpenAuctions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AuctionGrpcServices.OpenAuctions>(serviceImpl.GetOpenAuctions));
    }

  }
}
#endregion
